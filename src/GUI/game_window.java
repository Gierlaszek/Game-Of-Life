package GUI;

import javax.swing.JFrame;
import java.awt.Image;
import java.awt.Graphics;
import java.awt.Color;
import Patterns.Patterns;
import gameOfLife.game;
import java.awt.event.ActionEvent;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Timer;
import java.util.TimerTask;

/**
 *
 * @author kamil
 */

/*
    class game_window -> create new window with drawn grid, 
    - the whole game takes place in this window,
    - has method responsible for drawing cell
    - 
*/
public class game_window extends JFrame {

    /*
        variables
    */
    private static int width = 50, height = 50;
    private int currentPattern = 0; //contains the current pattern number
    boolean check = false; //check if a pattern has been drawn
    List<String> nameOfPatterns = Arrays.asList("random","queen","tumbler", "own");
    Image ScrImg;
    Graphics ScrGrap;
    static boolean[][] currentMove = new boolean[height][width]; //describes the location of cells
    static boolean play_pressed = false; //check if the button play is pressed
    
    /*
        constructor, opened new window with grid, closed old window with start panel
        the loop game is created here 
    */
    public game_window(JFrame parent, int c) {
        initComponents();
        parent.setVisible(false);
        ScrImg = createImage(jPanel1.getWidth(), jPanel1.getHeight());
        ScrGrap = ScrImg.getGraphics();
        currentPattern = c;
        Play.setFocusable(false);
        Timer time = new Timer();
        TimerTask task = new TimerTask(){
            public void run(){
                game game = new game();
                currentMove = game.run_nextMove();
                draw();
            }            
        };
        time.scheduleAtFixedRate(task, 0, 33); //33ms -> 30 Hz
        currentMove[0][0] = false; //need to draw after open this window 
        draw();
    }
    
    /*
        draw method to draw grid and alive cell 
        is based on boolean variable currentMove which describes 
        a place where the cells is alive
    */
    public void draw(){
        ScrGrap.setColor(jPanel1.getBackground());
        ScrGrap.fillRect(0, 0, jPanel1.getWidth(), jPanel1.getHeight());
        ScrGrap.setColor(Color.RED);
        for(int i = 0; i < height; i++){
            for(int j = 0; j < width; j++){
                if(currentMove[i][j]){
                    int x = j * jPanel1.getWidth() / width;
                    int y = i * jPanel1.getHeight() / height;                
                    ScrGrap.fillRect(x, y, jPanel1.getWidth()/width, jPanel1.getHeight()/height);
                }
            }
        }
        ScrGrap.setColor(Color.BLACK);
        for(int i = 0; i < width; i++){
            int x = i * jPanel1.getWidth() / width;
            ScrGrap.drawLine(x, 0, x, jPanel1.getWidth());
        }
        
        for(int j = 0; j < height; j++){
            int y = j * jPanel1.getHeight()/ height;
            ScrGrap.drawLine(0, y, jPanel1.getHeight(), y);
        }
        jPanel1.getGraphics().drawImage(ScrImg, 0, 0, jPanel1);
    }
        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Play = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setMaximumSize(new java.awt.Dimension(500, 500));
        jPanel1.setMinimumSize(new java.awt.Dimension(500, 500));
        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1MouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        jLabel1.setText("Press Enter to restart and starts another pattern");

        Play.setText("Play");
        Play.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Play, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Play)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        /*
            this method reset all cell 
            and change pattern to the next from list
        */
        if(evt.getKeyCode() == 10){
            currentMove = new boolean[height][width];
            check = false;
            if(play_pressed) Play.doClick();
            if(currentPattern <= 2){
                currentPattern++;
            }
            else if(currentPattern == 3){
                currentPattern = 0;
            }
        }  
    }//GEN-LAST:event_formKeyPressed

    /*
        this method sets the cell alive, according to
        selected pattern after clicking the mouse
    */
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        int j = evt.getX() * width / jPanel1.getWidth();
        int i = evt.getY() * height / jPanel1.getHeight();
        if(nameOfPatterns.get(currentPattern) == "own" || check){
            currentMove[i][j] = !currentMove[i][j];
        }
        else{
            Patterns pattern = new Patterns();
            currentMove = pattern.Patterns(nameOfPatterns.get(currentPattern), i, j);
            check = true;
        }
        draw();
    }//GEN-LAST:event_jPanel1MouseClicked

    private void PlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayActionPerformed
        play_pressed = !play_pressed;
        if(play_pressed){
            Play.setText("Pause");
        }
        else{
            Play.setText("Play");
        }
        draw();
    }//GEN-LAST:event_PlayActionPerformed

    /*
        this method allows you to draw cells when move the mouse on the screen
    */
    private void jPanel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseDragged
        int j = evt.getX() * width / jPanel1.getWidth();
        int i = evt.getY() * height / jPanel1.getHeight();
        if(i >=0 && j >= 0 && i < 50 && j< 50){
            if(nameOfPatterns.get(currentPattern) == "own" || check){
            currentMove[i][j] = true;
        }
        else currentMove[i][j] = false;
        }
        draw();
    }//GEN-LAST:event_jPanel1MouseDragged


    /*
        getters
    */
    public static int get_Width(){
        return width;
    }
    
    public static int get_Height(){
        return height;
    }
    
    public static boolean[][] get_currentMove(){
        return currentMove;
    }
    public static boolean get_info_play(){
        return play_pressed;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Play;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
